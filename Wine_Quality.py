# -*- coding: utf-8 -*-
"""ML_Minor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ise6-IxB65KEk59QPo2OcGswSudAV56v

***ML-Minor Project:***

*Statement*:- Wine quality prediction
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# loading the dataset to a Pandas DataFrame
wine_data = pd.read_csv('/content/drive/MyDrive/winequality-red.csv')

wine_data.head()

# checking for missing values
wine_data.isnull().sum()

#Perfect measures of the data
wine_data.describe()

# number of values for each quality
sns.catplot(x='quality', data = wine_data, kind = 'count')

"""Now we check the relation between each factor and the quality"""

# volatile acidity vs Quality
plot = plt.figure
sns.barplot(x='quality', y = 'volatile acidity', data = wine_data)

# citric acid vs Quality
plot = plt.figure
sns.barplot(x='quality', y = 'citric acid', data = wine_data)

# residual sugar vs Quality
plot = plt.figure
sns.barplot(x='quality', y = 'residual sugar', data = wine_data)

# chlorides	vs Quality
plot = plt.figure
sns.barplot(x='quality', y = 'chlorides', data = wine_data)

# free sulfur dioxide	vs Quality
plot = plt.figure
sns.barplot(x='quality', y = 'free sulfur dioxide', data = wine_data)

# total sulfur dioxide	vs Quality
plot = plt.figure
sns.barplot(x='quality', y = 'total sulfur dioxide', data = wine_data)

# density	vs Quality
plot = plt.figure
sns.barplot(x='quality', y = 'density', data = wine_data)

# pH	vs Quality
plot = plt.figure
sns.barplot(x='quality', y = 'pH', data = wine_data)

# sulphates	vs Quality
plot = plt.figure
sns.barplot(x='quality', y = 'sulphates', data = wine_data)

# alcohol	vs Quality
plot = plt.figure
sns.barplot(x='quality', y = 'alcohol', data = wine_data)

"""**NOW WE CHECK CORRELATION**"""

correlation = wine_data.corr()

# constructing a heatmap to understand the correlation between the columns
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt = '.1f', annot = True, annot_kws={'size':10}, cmap = 'icefire')

"""

1.   Data Preprocessing
2.   Label Binarizaton


"""

# separate the Label from Features.
x = wine_data.drop('quality',axis=1)

print(x)

#Given: 0-6 is categorized as bad and above 6 is categorized as good
y = wine_data['quality'].apply(lambda y_value: 1 if y_value>=7 else 0)

print(y)

"""**Train & Test Split**"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.15, random_state=3)

print(x.shape, x_train.shape, x_test.shape)

print(y.shape, y_train.shape, y_test.shape)

"""Model Training:

Random Forest Classifier
"""

model = RandomForestClassifier()

model.fit(x_train, y_train)

"""***Model Evaluation and Accuracy Score***"""

# accuracy on test data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy:- \n', test_data_accuracy)

"""***Building a Predictive System***"""

a=float(input('The amount of fixed acidity is: '))
b=float(input('The amount of volatile acidity is: '))
c=float(input('The amount of citric acid is: '))
d=float(input('The amount of residual sugar is: '))
e=float(input('The amount of chlorides is: '))
f=float(input('The amount of free sulfur dioxide is: '))
g=float(input('The amount of total sulfur dioxide is: '))
h=float(input('The amount of density is: '))
i=float(input('The amount of pH is: '))
j=float(input('The amount of sulphates is: '))
k=float(input('The amount of alcohol is: '))
input_data = (a,b,c,d,e,f,g,h,i,j,k)

# changing the input data to a numpy array
input_data_to_numpy_array = np.asarray(input_data)

# reshape the data as we are predicting the label for only one instance
input_data_reshaped = input_data_to_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)

#Printing the quality of wine
if (prediction[0]==1):
  print('\nQuality of wine: \n Good Quality Wine\n')
else:
  print('\nQuality of wine: \n Bad Quality Wine\n')
